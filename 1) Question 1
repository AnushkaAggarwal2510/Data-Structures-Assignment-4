Question 1) Develop a menu driven program demonstrating the following operations on simple
            Queues: enqueue(), dequeue(), isEmpty(), isFull(), display(), and peek().

Answer 1)
#include <iostream>
using namespace std;
#define SIZE 5

class Queue{
    int arr[SIZE];
    int front, rear;

public:
    Queue(){
        front= -1;
        rear= -1;
    }
    int isEmpty() {
        if (front == -1 || front>rear)
            return 1;
        else
            return 0;
    }
    int isFull() {
        if (rear == SIZE-1)
            return 1;
        else
            return 0;
    }
    void enqueue(int value) {
        if (isFull())
            cout << "Queue is Full! Cannot insert.\n";
        else {
            if (front == -1)
                front = 0;
            rear++;
            arr[rear] = value;
            cout << value << " inserted into queue.\n";
        }
    }
    void dequeue() {
        if (isEmpty())
            cout << "Queue is Empty! Cannot delete.\n";
        else {
            cout << arr[front] << " removed from queue.\n";
            front++;
        }
    }
    void peek() {
        if (isEmpty())
            cout << "Queue is Empty!\n";
        else
            cout << "Front element is: " << arr[front] << endl;
    }
    void display() {
        if (isEmpty())
            cout << "Queue is Empty!\n";
        else {
            cout << "Queue elements are: ";
            for (int i= front; i <= rear; i++)
                cout << arr[i] << " ";
            cout << endl;
        }
    }
};

int main() {
    Queue q;
    int choice, value;

    do {
        cout << "\n--- Queue Menu ---\n";
        cout << "1. Enqueue\n";
        cout << "2. Dequeue\n";
        cout << "3. Peek\n";
        cout << "4. Display\n";
        cout << "5. Check if Empty\n";
        cout << "6. Check if Full\n";
        cout << "7. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter value to insert: ";
            cin >> value;
            q.enqueue(value);
            break;

        case 2:
            q.dequeue();
            break;

        case 3:
            q.peek();
            break;

        case 4:
            q.display();
            break;

        case 5:
            if (q.isEmpty())
                cout << "Queue is Empty.\n";
            else
                cout << "Queue is NOT Empty.\n";
            break;

        case 6:
            if (q.isFull())
                cout << "Queue is Full.\n";
            else
                cout << "Queue is NOT Full.\n";
            break;

        case 7:
            cout << "Exiting program.\n";
            break;

        default:
            cout << "Invalid choice! Try again.\n";
        }

    } while (choice != 7);

    return 0;
}
