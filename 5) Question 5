Question 5) Write a program to implement a stack using 
(a) Two queues and 
(b) One Queue.

Answer 5(a)

#include <iostream>
#include <queue>
using namespace std;

class StackUsingTwoQueues {
    queue<int> q1;
    queue<int> q2;

public:
    // Push x onto stack (O(n) time)
    void push(int x) {
        q2.push(x);
        while (!q1.empty()) {
            q2.push(q1.front());
            q1.pop();
        }
        swap(q1, q2);
    }
    void pop() {
        if (q1.empty()) {
            cout << "Stack is Empty\n";
            return;
        }
        cout << "Popped: " << q1.front() << "\n";
        q1.pop();
    }
    void top() {
        if (q1.empty()) {
            cout << "Stack is Empty\n";
            return;
        }
        cout << "Top element: " << q1.front() << "\n";
    }
    int isEmpty() {
        return q1.empty() ? 1 : 0;
    }
    void display() {
        if (q1.empty()) {
            cout << "Stack is Empty\n";
            return;
        }
        cout << "Stack elements (Top to Bottom): ";
        queue<int> temp = q1;
        while (!temp.empty()) {
            cout << temp.front() << " ";
            temp.pop();
        }
        cout << "\n";
    }
};

int main() {
    StackUsingTwoQueues s;
    int choice, val;

    do {
        cout << "\n--- Stack using Two Queues ---\n";
        cout << "1. Push\n";
        cout << "2. Pop\n";
        cout << "3. Top\n";
        cout << "4. Display\n";
        cout << "5. Is Empty?\n";
        cout << "6. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter value to push: ";
            cin >> val;
            s.push(val);
            break;
        case 2:
            s.pop();
            break;
        case 3:
            s.top();
            break;
        case 4:
            s.display();
            break;
        case 5:
            if (s.isEmpty()) cout << "Stack is empty\n";
            else cout << "Stack is not empty\n";
            break;
        case 6:
            cout << "Exiting...\n";
            break;
        default:
            cout << "Invalid choice! Try again.\n";
        }
    } while (choice != 6);

    return 0;
}



Answer 5(b)

#include <iostream>
#include <queue>
using namespace std;

class StackUsingOneQueue {
    queue<int> q;

public:
    void push(int x) {
        q.push(x);
        int s = (int)q.size();
        for (int i = 0; i < s - 1; ++i) {
            q.push(q.front());
            q.pop();
        }
    }
    void pop() {
        if (q.empty()) {
            cout << "Stack is Empty\n";
            return;
        }
        cout << "Popped: " << q.front() << "\n";
        q.pop();
    }
    void top() {
        if (q.empty()) {
            cout << "Stack is Empty\n";
            return;
        }
        cout << "Top element: " << q.front() << "\n";
    }
    int isEmpty() {
        return q.empty() ? 1 : 0;
    }
    void display() {
        if (q.empty()) {
            cout << "Stack is Empty\n";
            return;
        }
        cout << "Stack elements (Top to Bottom): ";
        queue<int> temp = q;
        while (!temp.empty()) {
            cout << temp.front() << " ";
            temp.pop();
        }
        cout << "\n";
    }
};

int main() {
    StackUsingOneQueue s;
    int choice, val;

    do {
        cout << "\n--- Stack using One Queue ---\n";
        cout << "1. Push\n";
        cout << "2. Pop\n";
        cout << "3. Top\n";
        cout << "4. Display\n";
        cout << "5. Is Empty?\n";
        cout << "6. Exit\n";
        cout << "Enter your choice: ";
        if (!(cin >> choice)) {
            cin.clear();
            cin.ignore(10000, '\n');
            cout << "Invalid input. Please enter a number.\n";
            continue;
        }

        switch (choice) {
        case 1:
            cout << "Enter value to push: ";
            cin >> val;
            s.push(val);
            break;
        case 2:
            s.pop();
            break;
        case 3:
            s.top();
            break;
        case 4:
            s.display();
            break;
        case 5:
            if (s.isEmpty()) cout << "Stack is empty\n";
            else cout << "Stack is not empty\n";
            break;
        case 6:
            cout << "Exiting...\n";
            break;
        default:
            cout << "Invalid choice! Try again.\n";
        }
    } while (choice != 6);

    return 0;
}

